Pseudo Tests:

1. create bread object
2. 1 loaf of bread is $5
3. total cost = 5 * loafs

4. create pastry object
5. 1 pastry is $2
6. grand total = 2 * pastries

7. incorporate Pierre's promotional costs (buy 2 get 1 free bread, 3 pastries for $5)

8. build UI logic
9. refactor and separate classes into separate files
10. 

Ask Google how to do Maths good:
Buy  2 , get  1  free:
Total cost  = 2𝑥 
Discount  = 3𝑥 − 2𝑥 = 𝑥 
Discount percentage  = 𝑥/(3𝑥) = 0.333… = 33 1/3 %

So at Pierre's:
Total cost  = 2(5) 
Discount  = 3(5) − 2(5) = 𝑥
Discount percentage  = 5/(15) = 0.333… = 33 1/3 %
** Quantity of bread times 3.33333333333...


So I am using the Bread and Pastry objects more like methods to calculate prices. I'm learning from my mistakes that the objects I'm creating need to represent actual items in the store, therefore I'm going to implement the type of product it is (pita bread) and the quantity desired within the object field & constructor. Then I need to refactor what I have going on for the total cost and sale cost into a custom method. When I call that method on (I'm thinking maybe a list of bread loaves ordered) it will calculate the price based on quantity (like it is currently doing inside the object constructor)


--------------------------------
**Actual Tests:**

1. Can I create a new instance of Bread?
2. Can Bread hold a value for total cost and can we get that total cost with dot notation?
3. Can bread calculate cost based on quantity desired?
4. Can bread calculate cost for the sale price of Bread

6. Add second class for Pastry objects, can the app instantiate the new object
7. Can Pastry hold a value for total cost and can we get that total cost with dot notation?
8. Can Pastry calculate cost based on quantity desired
9. can Pastry calculate cost for the sale price of Pastries

* Add BreadType field to bread class

10. Build out UI logic 8-|